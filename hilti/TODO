
Not working
===========

- channel.* and threads.* are broken since the recent
reorganisation. Their tests are disabled for now.

- visitor support is broken. While it's not used anymore internally,
it will likely be useful for external code, so we should restore
that functionality.

Instructions
============

- Single return statement independent of whether we're returning a
  value or not. 

- The string variants of regexp.* aren't implemented yet.

- The string type is still missing a number of instructions.

Infrastructure
==============

- We don't ensure that instructions that modify their arguments
  don't receive any constants. 

- The parser doesn't associate line-comments correctly with global
  declarations (or better: it does not do so at all; the code
  doesn't seem to do the right thing.) It works for comments before
  the "module" statement though.

- We should be able to significantly simplify the whole type
  comparision thing now (type.__equal__, type.cmpWithSameType).
  Essentually, comapring two types should yield True only if they
  are exactly equivalent (i.e., without coercion). 

Cleanup
=======

- Need to revisit type.__equal__. See todo there. 

- Do we still need operand.Type, now that MetaType is pretty much a standard
  type that supports all the usual operations?

- constraints.py: do we really need the per-type cSomething constraints at the
  very end? Can't we use types directly?

- For the node.Node methods, derived classes do not consistely call
  the parent's implementation.
  
- operand.py: coerceTo() shouldn't modify the operand in place but just return
  a new operand which is accordingly coerced. Otherwise, it gets confusion easily.
  
- We should cleanup which exception is thrown when; the choice isn't
  done very systemically right now. 

- Remove labels'@-prefix. We might want to introduce id.Label to
  separate them from other locals.

LLVM problems
=============

- Can't add the tailcall attribute in llvm-py currently.

- At least for X86_64, our struct-return heuristic isn't sufficient.
  It does for example not return tuple<double,string> correctly.
  Worked around that particular cases by hard-coding it in system.h,
  but generally it seems we need a more complex set of rules. 
  
  Don't know what the situation is on other ABIs.

Optimizations
=============

- In CodeGen.llvmGenerateCCall, when returning structs, we have to
  create a temporary on the stack just because we can't cast an
  integer into a struct. I'd think the tmp could be optimized away
  but it currently isn't. 

- The byte-order specific unpack's could use the bswap intrinsic.

- The addr's check for an IPv4 address could use the ctlz intrinsic.

- When building strucy values, rather than alloc'ing tmp instances,
  which should use insertvalue.

- llvm-py caches objects based on their physical address; not a good
  idea ... The cache sometimes returned objects of the wrong type.
  We patch llvm-py to avoid that (see llvm-py-objcache.diff).
  However, there's still a low probability that the wrong object is
  used ...

Documentation
=============

- Generating the documentation is currently broken. Need to overhaul
  that quite a bit.

- The C layer is mostly undocumneted. Need to add Doxygen comments
  across the board. 

3rd party
=========

- The Boehm-Weiser garbage collector does not seem to support 
  PARALLEL_MARK and THREAD_LOCAL_ALLOC on all platforms; notably not
  on FreeBSD. We enable always specify them in
  libhilti/scripts/do-build, but bdwgc/CMakeLists.txt may ignore
  them based on platform. Check that more carefully.

Links
=====

- Sunrise DD: A hash table implementation with lock-free concurrent
  access. Looks pretty complex though, and does not make sense to
  use until we have settled on a data model for multi-threading.
  
  http://www.sunrisetel.net/software/devtools/sunrise-data-dictionary.shtml

- Look at http://bjoern.hoehrmann.de/utf-8/decoder/dfa/ for an
  alternative (and extremely small) UTF-8 decoder. 
  
- LGPL Aho-Corasick implementation.  
