# $Id$
#
# @TEST-EXEC:  hilti-build %INPUT a.out 
# @TEST-EXEC:  ./a.out >output 2>&1
# @TEST-EXEC:  test-diff output

module Main

import hilti

void run() {
    local iterator<bytes> p1
    local iterator<bytes> p2
    local iterator<bytes> p3
    local int32 diff
    local string out
    local ref<bytes> b
    local ref<bytes> b2
    
    local tuple<int8, iterator<bytes>> t8
    local int8 i8
    local tuple<int16, iterator<bytes>> t16
    local int16 i16
    local tuple<int32, iterator<bytes>> t32
    local int32 i32
    local tuple<int64, iterator<bytes>> t64
    local int64 i64
    
    b = bytes.assign b"\x11\x22\x33\x44\x55\x66\x77\x88\x99"
    p1 = bytes.begin b
    p2 = bytes.end b

    ## 

    t8 = unpack p1 p2 Hilti::Packed::Int8Little
    i8 = tuple.index t8 0
    p3 = tuple.index t8 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i8, i8, diff))
    call Hilti::print(out)
    
    t8 = unpack p1 p2 Hilti::Packed::Int8Big
    i8 = tuple.index t8 0
    p3 = tuple.index t8 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i8, i8, diff))
    call Hilti::print(out)
    
    ## 

    t16 = unpack p1 p2 Hilti::Packed::Int16Little
    i16 = tuple.index t16 0
    p3 = tuple.index t16 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i16, i16, diff))
    call Hilti::print(out)
    
    t16 = unpack p1 p2 Hilti::Packed::Int16Big
    i16 = tuple.index t16 0
    p3 = tuple.index t16 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i16, i16, diff))
    call Hilti::print(out)

    ##
    
    t32 = unpack p1 p2 Hilti::Packed::Int32Little
    i32 = tuple.index t32 0
    p3 = tuple.index t32 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i32, i32, diff))
    call Hilti::print(out)
    
    t32 = unpack p1 p2 Hilti::Packed::Int32Big
    i32 = tuple.index t32 0
    p3 = tuple.index t32 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i32, i32, diff))
    call Hilti::print(out)

    ## 

    t64 = unpack p1 p2 Hilti::Packed::Int64Little
    i64 = tuple.index t64 0
    p3 = tuple.index t64 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i64, i64, diff))
    call Hilti::print(out)
    
    t64 = unpack p1 p2 Hilti::Packed::Int64Big
    i64 = tuple.index t64 0
    p3 = tuple.index t64 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i64, i64, diff))
    call Hilti::print(out)

    ######
    
    call Hilti::print("")

    ######

    t16 = unpack p1 p2 Hilti::Packed::UInt8Little
    i16 = tuple.index t16 0
    p3 = tuple.index t16 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i16, i16, diff))
    call Hilti::print(out)
    
    t16 = unpack p1 p2 Hilti::Packed::UInt8Big
    i16 = tuple.index t16 0
    p3 = tuple.index t16 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i16, i16, diff))
    call Hilti::print(out)
    
    ## 

    t32 = unpack p1 p2 Hilti::Packed::UInt16Little
    i32 = tuple.index t32 0
    p3 = tuple.index t32 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i32, i32, diff))
    call Hilti::print(out)
    
    t32 = unpack p1 p2 Hilti::Packed::UInt16Big
    i32 = tuple.index t32 0
    p3 = tuple.index t32 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i32, i32, diff))
    call Hilti::print(out)

    ##
    
    t64 = unpack p1 p2 Hilti::Packed::UInt32Little
    i64 = tuple.index t64 0
    p3 = tuple.index t64 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i64, i64, diff))
    call Hilti::print(out)
    
    t64 = unpack p1 p2 Hilti::Packed::UInt32Big
    i64 = tuple.index t64 0
    p3 = tuple.index t64 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i64, i64, diff))
    call Hilti::print(out)

    ######
    
    call Hilti::print("")

    ######
    
    # This is -42 in little endian (for all bit-sizes).
    b2 = bytes.assign b"\xd6\xff\xff\xff\xff\xff\xff\xff"   
    p1 = bytes.begin b2
    p2 = bytes.end b2

    t8 = unpack p1 p2 Hilti::Packed::Int8Little
    i8 = tuple.index t8 0
    p3 = tuple.index t8 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i8, i8, diff))
    call Hilti::print(out)

    t16 = unpack p1 p2 Hilti::Packed::Int16Little
    i16 = tuple.index t16 0
    p3 = tuple.index t16 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i16, i16, diff))
    call Hilti::print(out)

    t32 = unpack p1 p2 Hilti::Packed::Int32Little
    i32 = tuple.index t32 0
    p3 = tuple.index t32 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i32, i32, diff))
    call Hilti::print(out)
    
    t64 = unpack p1 p2 Hilti::Packed::Int64Little
    i64 = tuple.index t64 0
    p3 = tuple.index t64 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i64, i64, diff))
    call Hilti::print(out)
    
    ######
    
    call Hilti::print("")

    ######
    
    t16 = unpack p1 p2 Hilti::Packed::UInt8Little
    i16 = tuple.index t16 0
    p3 = tuple.index t16 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i16, i16, diff))
    call Hilti::print(out)

    t32 = unpack p1 p2 Hilti::Packed::UInt16Little
    i32 = tuple.index t32 0
    p3 = tuple.index t32 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i32, i32, diff))
    call Hilti::print(out)

    t64 = unpack p1 p2 Hilti::Packed::UInt32Little
    i64 = tuple.index t64 0
    p3 = tuple.index t64 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i64, i64, diff))
    call Hilti::print(out)
    
}
