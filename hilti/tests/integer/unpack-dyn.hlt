# $Id$
#
# @TEST-EXEC:  hilti-build %INPUT -o a.out 
# @TEST-EXEC:  ./a.out >output 2>&1
# @TEST-EXEC:  test-diff output
#
# This test uses a non-constant format paramater for the unpack
# format. 

module Main

import Hilti

void myunpack(ref<bytes> b, Hilti::Packed fmt) {
    local iterator<bytes> p1
    local iterator<bytes> p2
    local iterator<bytes> p3
    local tuple<int64, iterator<bytes>> t64
    local int64 i64
    local int32 diff
    local string out
    
    p1 = bytes.begin b
    p2 = bytes.end b
    
    t64 = unpack p1 p2 fmt
    
    i64 = tuple.index t64 0 
    p3 = tuple.index t64 1
    diff = bytes.diff p1 p3
    out = call Hilti::fmt ("hex=0x%x dec=%d diff=%d", (i64, i64, diff))
    call Hilti::print(out)
}

void run() {
    local string out
    local ref<bytes> b
    local ref<bytes> b2
    local int32 i

    b = bytes.assign b"\x11\x22\x33\x44\x55\x66\x77\x88\x99"
    
    # This is -42 in little endian (for all bit-sizes).
    b2 = bytes.assign b"\xd6\xff\xff\xff\xff\xff\xff\xff"   
    
    call myunpack(b, Hilti::Packed::Int8Little)
    call myunpack(b, Hilti::Packed::Int8Big)
    call myunpack(b, Hilti::Packed::Int16Little)
    call myunpack(b, Hilti::Packed::Int16Big)
    call myunpack(b, Hilti::Packed::Int32Little)
    call myunpack(b, Hilti::Packed::Int32Big)
    call myunpack(b, Hilti::Packed::Int64Little)
    call myunpack(b, Hilti::Packed::Int64Big)
    call Hilti::print(out)
    call myunpack(b, Hilti::Packed::UInt8Little)
    call myunpack(b, Hilti::Packed::UInt8Big)
    call myunpack(b, Hilti::Packed::UInt16Little)
    call myunpack(b, Hilti::Packed::UInt16Big)
    call myunpack(b, Hilti::Packed::UInt32Little)
    call myunpack(b, Hilti::Packed::UInt32Big)
    call Hilti::print(out)
    call myunpack(b2, Hilti::Packed::Int8Little)
    call myunpack(b2, Hilti::Packed::Int16Little)
    call myunpack(b2, Hilti::Packed::Int32Little)
    call myunpack(b2, Hilti::Packed::Int64Little)
    call Hilti::print(out)
    call myunpack(b2, Hilti::Packed::UInt8Little)
    call myunpack(b2, Hilti::Packed::UInt16Little)
    call myunpack(b2, Hilti::Packed::UInt32Little)
}
    
    
    
    
    
