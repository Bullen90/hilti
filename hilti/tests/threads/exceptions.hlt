# $Id$
#
# @TEST-EXEC:  hilti-build2 %INPUT -o a.out
# @TEST-EXEC:  bash -c "echo RUN\ 1 > output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  grep uncaught output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 2 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  grep uncaught output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 3 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  grep uncaught output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 4 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  grep uncaught output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 5 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  grep uncaught output.tmp >> output
# @TEST-EXEC:  btest-diff output

module Main

import Hilti

void print_num(int<64> num) {
    call Hilti::print (num, True)
    return.void
}

int<64> make_const(int<64> num) {
    return.result num
}

void run() {
    local int<64> count
    local int<64> limit
    local int<64> zero
    local bool eq

    call Hilti::print ("Exception in main thread:", True)

    count = call make_const(1)
    limit = call make_const(6)
    zero = call make_const(0)

@loop:
    eq = int.eq count limit
    if.else eq @exit @cont

@cont:
    thread.schedule print_num(count) count
    count = incr count
    jump @loop

@exit:
    zero = int.div 12 zero

    return.void
}

# @TEST-START-NEXT

module Main

import Hilti

void print_num(int<64> num) {
    call Hilti::print (num, True)
    return.void
}

void bad_print_num(int<64> num) {
    local int<64> zero

    zero = int.add -5 5
    zero = int.div 12 zero

    call Hilti::print (num, True)
    return.void
}

int<64> make_const(int<64> num) {
    return.result num
}

void run() {
    local int<64> count
    local int<64> limit
    local int<64> bad_num
    local bool eq

    call Hilti::print ("Exception in worker thread:", True)

    count = call make_const(1)
    limit = call make_const(6)
    bad_num = call make_const(3)

#    thread.schedule bad_print_num(3) 3

@loop:
    eq = int.eq count limit
    if.else eq @exit @cont

@cont:
    eq = int.eq count bad_num
    if.else eq @bad_print @good_print

@bad_print:
    thread.schedule bad_print_num(count) count
    count = incr count
    jump @loop

@good_print:
    thread.schedule print_num(count) count
    count = incr count
    jump @loop

@exit:
    call Hilti::print("Done", True)
    return.void
}


