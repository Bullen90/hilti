# $Id$
#
# @TEST-EXEC:  hilti-build %INPUT -o a.out
# @TEST-EXEC:  bash -c "echo RUN\ 1 > output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  grep uncaught output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 2 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  grep uncaught output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 3 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  grep uncaught output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 4 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  grep uncaught output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 5 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  grep uncaught output.tmp >> output
# @TEST-EXEC:  test-diff output

module Main

import hilti

void print_num(int<32> num) {
    call Hilti::print (num, True)
    return.void
}

int<32> make_const(int<32> num) {
    return.result num
}

void run() {
    local int<32> count
    local int<32> limit
    local int<32> zero
    local bool eq

    call Hilti::print ("Exception in main thread:", True)

    count = call make_const(1)
    limit = call make_const(6)
    zero = call make_const(0)

@loop:
    eq = int.eq count limit
    if.else eq @exit @cont

@cont:
    thread.schedule count print_num(count)
    count = incr count
    jump @loop

@exit:
    zero = int.div 12 zero

    return.void
}

# module Main
# 
# import hilti
# 
# void print_num(int<32> num) {
#     call Hilti::print (num, True)
#     return.void
# }
# 
# void bad_print_num(int<64> num) {
#     local int<32> zero
# 
#     zero = int.add -5 5
#     zero = int.div 12 zero
# 
#     call Hilti::print (num, True)
#     return.void
# }
# 
# int<32> make_const(int<32> num) {
#     return.result num
# }
# 
# void run() {
#     local int<32> count
#     local int<32> limit
#     local bool eq
# 
#     call Hilti::print ("Exception in worker thread:", True)
# 
#     count = call make_const(1)
#     limit = call make_const(6)
# 
#     thread.schedule 3 bad_print_num(3)
# 
# @loop:
#     eq = int.eq count limit
#     if.else eq @exit @cont
# 
# @cont:
#     thread.schedule count print_num(count)
#     count = incr count
#     jump @loop
# 
# @exit:
#     call Hilti::print("Done", True) 
# #@loop:
# #    eq = int.eq count limit
# #    if.else eq @exit @cont
# #
# #@cont:
# #    thread.schedule count print_num(count)
# #    count = incr count
# #    jump @loop
# #
# #@exit:
#     return.void
# }


