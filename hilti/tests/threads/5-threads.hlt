# $Id$
#
# @TEST-EXEC:  hilti-build %INPUT -o a.out
# @TEST-EXEC:  bash -c "echo RUN\ 1 > output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  sort output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 2 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  sort output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 3 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  sort output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 4 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  sort output.tmp >> output
# @TEST-EXEC:  bash -c "echo RUN\ 5 >> output"
# @TEST-EXEC:  ./a.out >output.tmp 2>&1
# @TEST-EXEC:  sort output.tmp >> output
# @TEST-EXEC:  btest-diff output

module Main

import Hilti

void print1() {
    call Hilti::print ("1", True)
    return.void
}

void print2() {
    call Hilti::print ("2", True)
    return.void
}

void print3() {
    call Hilti::print ("3", True)
    return.void
}

void print4() {
    call Hilti::print ("4", True)
    return.void
}

void print5() {
    call Hilti::print ("5", True)
    return.void
}

void run() {
    thread.schedule 1 print1()
    thread.schedule 2 print2()
    thread.schedule 3 print3()
    thread.schedule 4 print4()
    thread.schedule 5 print5()
}

# @TEST-START-NEXT

module Main

import Hilti

void print_num(int<32> num) {
    call Hilti::print (num, True)
    return.void
}

int<32> make_const(int<32> num) {
    return.result num
}

void run() {
    local int<32> count
    local int<32> limit
    local bool eq

    count = call make_const(1)
    limit = call make_const(6)

@loop:
    eq = int.eq count limit
    if.else eq @exit @cont

@cont:
    thread.schedule count print_num(count)
    count = incr count
    jump @loop

@exit:
    return.void
}
