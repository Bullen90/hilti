#! /usr/bin/env bash
#
# Turns a HILTI source into an executable by compiling, assembling,
# and linking with libhiltimain.
#
# Honors the following environment variables to pass additional flags
# on to the corresponding tools:
#
#     HILTICFLAGS
#     LLVMASFLAGS
#     LLVMLDFLAGS
#     CFLAGS
#
# If HILTIDEPS is set to the hilti-dependency location, paths are
# setup accordingly.

if [ "$HILTIDEPS" != "" -a -e "$HILTIDEPS/bin/setup-paths" ]; then
   eval `$HILTIDEPS/bin/setup-paths`
fi

function usage {
   echo "Usage: hilti-build [-m] [-t] [-v] -o <output> <input-files>"
   echo
   echo "Input files may be end in one of the following extensions:"
   echo "    *.hlt     - HILTI files"
   echo "    *.ll      - LLVM assember file"
   echo "    *.bc      - LLVM bitcode files"
   echo "    *.pac2    - BinPAC++ source files"
   echo
   echo "Options:"
   echo "    -o         Name of output file; mandatory."
   echo "    -m         Link with libhilti instead of libhiltimain."
   echo "    -t         Do not delete temporary files."
   echo "    -v         Output command lines as they are executed."
   echo "    -O1/O2/O3  Apply optimizations (see 'man opt'); also enables LTO."
   echo "    -l obj.bc  Additional object file to link in."
   echo "    -P         Generate only C prototypes for *.hlt files; does nothing else."
   echo "    -c         Produce a native, linkable object file, not an executable."
   echo "    -b         Produce a bitcode file for JITing."
   echo "    -d         Compile BinPAC++ and HILTI files with debugging support (HILTI level 1)."
   echo "    -D         Compile BinPAC++ and HILTI files with debugging support (HILTI level 2)."
   echo "    -a         Set flags for compiling BinPAC++ sources even if not given"
   echo "    -S <size>  Default stack segment size to pass to hiltic"
   echo
   exit 1
}

function execute {
    if [ "$verbose" != "" ]; then
       echo $@ >>$verbose
    fi

    eval $@
}

function delete_tmps {
     # Delete at exit.
     if [ "$keeptmp" != "1" ]; then
         rm -f $tmpfiles
     fi
}

# Turns *.hlt into *.ll
function compile_hlt {
    input=$1
    dir=`dirname $input`
    base=`basename $input .hlt`

    if [ "$protos" == "1" ]; then
        # Just run hiltic to generate the C prototypes.
        doth=$base.h
        execute "hiltic -P $hilticflags $input -o $doth" || exit 1
        result=$doth;
    else
        # Compile *.hlt into *.ll
        ll=$base.tmp.ll
        tmpfiles="$tmpfiles $ll"
        execute "hiltic -l $hilticflags -o $ll $input" || exit 1
        result=$ll
    fi
}

# Turns *.ll into *.bc
function compile_ll {
    input=$1
    dir=`dirname $input`
    base=`basename $input .ll`

    if [ "$opt" != "-O0" ]; then
        pipeopt="| opt $opt"
    else
        pipeopt=""
    fi

    bc=$base.tmp.bc
    tmpfiles="$tmpfiles $bc"
    execute "llvm-as $llvmasflags < $input $pipeopt >$bc"
    result=$bc
}

# Turns *.ll into *.bc
function compile_pac {
    input=$1
    dir=`dirname $input`
    base=`basename $input .ll`

    hlt=$base.tmp.hlt
    tmpfiles="$tmpfiles $hlt"
    execute "binpac++ $bppflags $input -o $hlt"
    result=$hlt
}

# Turns *.c into *.bc
function compile_c {
    input=$1
    dir=`dirname $input`
    base=`basename $input .ll`

    bc=$base.tmp.bc
    tmpfiles="$tmpfiles $bc"
    execute "clang -c -emit-llvm -D_GNU_SOURCE $opt $cflags -o $bc $input"
    result=$bc
}

# Turns *.cc into *.bc
function compile_cc {
    input=$1
    dir=`dirname $input`
    base=`basename $input .ll`

    bc=$base.tmp.bc
    tmpfiles="$tmpfiles $bc"
    execute "llvm-g++ -c -emit-llvm $opt $cxxflags -o $bc $input"
    result=$bc
}

# Links all *.bc together into the final output file.
function link_all {
    bc=$@

    execute "llvm-ld -disable-opt -b=$output.bc $bc $libsbc $llvmldflags" || exit 1
    execute "rm -f $output" || exit 1 # Stupid shell script.

    if [ "$opt" != "-O0" ]; then
        tmpfiles="$tmpfiles $output.opt.bc"
        execute "opt -f $opt $output.bc -o=$output.opt.bc" || exit 1
        execute "mv $output.opt.bc $output.bc"
    fi

    if [ "$bitcode" != "" ]; then
       # Done.
       return
    fi

    tmpfiles="$tmpfiles $output.bc"
    tmpfiles="$tmpfiles $output.bc.S"

    # Compile into native assembler.
    execute "llc -o=$output.bc.S $output.bc" || exit 1

    # Assemble into executable code. Seems using the compiler driver is the way to go here ...
    if [ "$noexec" != "" ]; then
        exec="-Xlinker=-r"
    else
        exec=""
    fi

    execute "clang -g -o $output $exec $libsc $output.bc.S"
}

function find_libraries {
    result=""
    paths=""
    libs=""
    ext=$1
    shift

    for flag in $@; do
        echo $flag | grep -q '^-L'
        if [ $? == 0 ]; then
           paths="$paths `echo $flag | sed 's/^-L//g'`"
        fi

        echo $flag | grep -q '^-l'
        if [ $? == 0 ]; then
           libs="$libs `echo $flag | sed 's/^-l//g'`"
        fi
    done

    for lib in $libs; do
        for path in $paths; do
            full=$path/lib$lib.$ext
            if [ -f $full ]; then
               result="$result $full"
            fi
        done
    done

    echo $result
}

tmpfiles=""
inputs=""
protos=""
noexec=""
bitcode=""
debug="--debug"
stack=""
libsbcflag="--libs-bc-main"
have_pac2=0

while [ "$1" != "" ]; do
    case $1 in
        -m)
            libsbcflag="--libs-bc" ; shift;;
        -t)
            keeptmp=1; shift;;
        -v)
            verbose=/dev/stderr; shift;;
        -O1)
            opt=$1; debug=""; shift;;
        -O2)
            opt=$1; debug=""; shift;;
        -O3)
            opt=$1; debug=""; shift;;
        -P)
            protos="1"; shift;;
        -o)
            output=$2; shift; shift;;
        -c)
            noexec="1"; shift;;
        -b)
            bitcode="1"; shift;;
        -d)
            shift;;
        -D)
            hiltic_debug_addl="-d"; debug="--debug"; shift;;
        -a)
            have_pac2=1; shift;;
        -S)
            stack="-S $2"; shift; shift;;
        -h)
            usage;;
        -*)
            usage;;
        *)
            if echo $1 | grep -q '\.pac2$'; then
                have_pac2=1
            fi
            inputs="$inputs $1"; shift;;
    esac
done

if [ "$inputs" == "" ]; then
   usage
fi

if [ "$output" == "" -a "$protos" != "1" ]; then
   echo "name of output file must be given with -o." >&2
   exit 1
fi

if [ "$TEST_DIAGNOSTICS" != "" ]; then
   keeptmp=1
fi

if [ "$opt" == "" ]; then
   opt="-O0"
fi

trap delete_tmps 0

if [ "$HILTI_CONFIG" != "" ]; then
    hilticonfig=$HILTI_CONFIG
else
    hilticonfig=`which hilti-config 2>/dev/null`
fi

if [ "$BINPAC_CONFIG" != "" ]; then
    binpacconfig=$BINPAC_CONFIG
else
    binpacconfig=`which binpac-config 2>/dev/null`
fi

if [ ! -x "$hilticonfig" ]; then
   echo "cannot find hilti-config; try setting HILTI_CONFIG." >&2
   exit 1
fi

llvmasflags="$LLVMASFLAGS"
hilticflags="`$hilticonfig $debug --hilticflags` $hiltic_debug_addl $stack $HILTICFLAGS"
llvmldflags="`$hilticonfig $debug --ldflags` $LLVMLDFLAGS"
cflags="`$hilticonfig $debug --cflags` -Wall $CFLAGS -g"
cxxflags="`$hilticonfig $debug --cxxflags` $CFLAGS -g"
libsbc=`$hilticonfig $debug $libsbcflag`
libsc=`$hilticonfig $debug --libs-c`

if [ "$have_pac2" == "1" ]; then

   if [ ! -x "$binpacconfig" ]; then
      echo "cannot find binpac-config; try setting BINPAC_CONFIG." >&2
      exit 1
   fi

   # Need binpac++ flags.
   cflags="$cflags `$binpacconfig $debug --cflags`"
   hilticflags="$hilticflags `$binpacconfig $debug --hiltic`"
   llvmldflags="$llvmldflags `$binpacconfig $debug --ldflags`"
   libsbc="`$binpacconfig $debug --libs-bc` $libsbc" # Order is important!
   bppflags="`$binpacconfig $debug --bppflags` `$hilticonfig --hilticflags`"

   export PATH=`$binpacconfig $debug --path`:$PATH
   export PYTHONPATH=`$binpacconfig $debug --pythonpath`:$PYTHONPATH

fi

export PATH=`$hilticonfig $debug --path`:$PATH
export PYTHONPATH=`$hilticonfig $debug --pythonpath`:$PYTHONPATH

input=$@
objs=""

for file in $inputs; do

    if echo $file | grep -q '\.hlt$'; then
       compile_hlt $file
       if [ "$protos" != "1" ]; then
           compile_ll $result
       fi
       objs="$objs $result"

    elif echo $file | grep -q '\.ll$'; then
       compile_ll $file
       objs="$objs $result"

    elif echo $file | grep -q '\.c$'; then
       compile_c $file
       objs="$objs $result"

    elif echo $file | grep -q '\.cc$'; then
       compile_cc $file
       objs="$objs $result"

    elif echo $file | grep -q '\.bc$' ; then
       objs="$objs $file"

    elif echo $file | grep -q '\.pac2$' ; then
       compile_pac $file
       compile_hlt $result
       if [ "$protos" != "1" ]; then
           compile_ll $result
       fi
       objs="$objs $result"

    else
       echo "unknown input type $file"
       exit 1
    fi

done

if [ "$protos" == "1" ]; then
   # Nothing else to do.
   exit 0;
fi

link_all $objs
