#! /usr/bin/env bash
#
# Turns a HILTI source into an executable by compiling, assembling, 
# and linking with libhiltimain. 
#
# Honors the following environment variables to pass flags on to the 
# corresponding tools:
#
#     HILTICFLAGS
#     LLVMASFLAGS
#     LLCFLAGS
#     ASFLAGS
#     LDFLAGS
#
#
# If TEST_DIAGNOSTICS is set, it's content is supposed to be a filename 
# receiving the -v outut. TEST_DIAGNOSTICS also implies -t. 

LIBS="-lhiltimain -lc"

function execute {
    if [ "$verbose" != "" ]; then
       echo $@ >>$verbose
    fi

    eval $@
}

function delete_tmps {
     # Delete at exit.
     if [ "$keeptmp" != "1" ]; then
         rm -f $ll $asm $doto
     fi
}

while [ "$1" != "" ]; do
    case $1 in 
        -t)
            keeptmp=1; shift;;
        -v)
            verbose=/dev/stdout; shift;;
        *)
            break;;
    esac
done    

if [ "$TEST_DIAGNOSTICS" != "" ]; then
   verbose=$TEST_DIAGNOSTICS
   keeptmp=1
fi   

if [ "$#" -lt "1" -o "$#" -gt "2" ]; then
   echo "Usage: hilti-build [-t] [-v] <input.hlt> [<output>]"
   echo 
   echo "Options:"
   echo "  -t      Do not delete temporary files."
   echo "  -v      Output command lines as they are executed."
   echo
   exit 1 
fi   

trap delete_tmps 0

input=$1
output=$2

dir=`dirname $input`
base=`basename $input .hlt`

if [ "$2" == "" ]; then
   output=$dir/$base
fi

ll=$dir/$base.ll
asm=$dir/$base.S
doto=$dir/$base.o

# Turns into human-readable LLVM code 
# (We could skip this step but keep it for debugging.)
execute hiltic $HILTICFLAGS -l $input -o $ll || exit 1

# Turn it into bytecode and then native code. 
execute llvm-as $LLVMASFLAGS < $ll | llc >$asm || exit 1

# Assemble. 
execute as $ASFLAGS $asm -o $doto || exit 1 

# Link. 
execute gcc $LDFLAGS $doto $LIBS -o $output








