
HILTI Level
===========

- Track which fields of a struct are actually needed. Those which are
  not read (or not used at all), can be removed for non-exported types.
  
  Potentially, a struct could be empty afterwards, in which case can
  remove it completely, including all references to it. 
  
- Track which locals don't need to be saved in the function frame
  (e.g., because of potential yielding).  Remove them from the frame
  and use local LLVM (SSA-) variables during code generation
  instead.
  
- Track locals which have the same type but are never used
  concurrently.  They can be merged into a single local (the
  previous point may already remove a number of these, but not all). 
  
- There are probably a number of micro-optimizations easy and
  worthwhile doing. Look at generated HILTI code. 

- Dead-code elimination, in particular remove all code for hooks
  which are never run.

  While LLVM already does eliminate dead code, doing it at the HILTI
  level as well allows the other optimization above to kick in.

- Inlining at the HILTI level; again, this will allow more
  optimizations to kick in.

- Can we identify cases where we can combine nested structures into
  a single one? Might be hard to do in general, but seems there
  could a few specific cases, particularly coming out of BinPAC,
  where it will be helpful. 

- BinPAC++ uses a "__cur_ field in the parse objects to allow hooks
  to change the current parsing position. Before a hook is run, that
  field is set to the current position and afterwards its value is
  written back to the current position. A hook can change it in
  between. However, most of the time there is no change and the
  compiler should optimize then that field away.

LLVM Level
==========

- Track which of our one-function-per-block functions are called
  only from their parent function, not from external via
  continuations (or from other child functions of the same functions
  that are called from continatuions). Those can be recombined with
  their parent into a single LLVM function, removing the function
  call glue. 
  
- Can we optimize the frame management for cases where yielding is
  unlikley? Use real locals initially and copy them into the frame
  only when necessary.
  
  
