/* $Id$
 * 
 * Public libhilti interface with functions that can be called directly
 * either from the host application or from a user's HILTI program.
 * 
 */

#ifndef HILTI_H
#define HILTI_H

#include <stdint.h>
#include <stddef.h>

typedef struct __hlt_type_info __hlt_type_info;
typedef struct __hlt_string __hlt_string;
typedef struct __hlt_addr __hlt_addr;
typedef struct __hlt_net __hlt_net;
typedef struct __hlt_port __hlt_port;
typedef struct __hlt_overlay __hlt_overlay;

    // %doc-hlt_exception-start
typedef const char* __hlt_exception;
    // %doc-hlt_exception-end

// Initialize the HILTI run-time library. 
extern void hilti_init();

// Library functions.
extern void hilti_print(const __hlt_type_info* type, void* obj, int8_t newline, __hlt_exception* excpt);
extern const __hlt_string* hilti_fmt(const __hlt_string* fmt, const __hlt_type_info* type, const char* tuple, __hlt_exception* excpt);

// Configuration handling structures and functions for the HILTI run-time.
typedef struct
{
    unsigned num_threads;
    long sleep_ns;
    unsigned watchdog_s;
    size_t stack_size;
} hilti_config;

extern hilti_config hilti_config_get();
extern void hilti_config_set(const hilti_config* new_config);

// Enters a HILTI program from C. Autogenerated during the HILTI compilation process.
extern void main_run(__hlt_exception* excpt);

// Enters a multithreaded HILTI program from C, setting up the appropriate threading
// environment before entering HILTI and tearing it down afterwards.
extern void hilti_multithreaded_run(__hlt_exception* hilti_except);

#endif    
