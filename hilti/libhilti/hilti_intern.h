/* $Id$
 * 
 * Private interface that is supposed to be used only from other libhilti
 * functions, or from code generated by the HILTI compiler. In other words,
 * the elements of this interface are never exposed to a HILTI user. 
 * 
 */

#ifndef HILTI_INTERN_H
#define HILTI_INTERN_H

#include <stdlib.h>

#include "hilti.h"

///////////////////////////////////////////////////////////////////////////////
// Predefined exceptions.
///////////////////////////////////////////////////////////////////////////////

typedef const char* __hlt_exception_t;

extern __hlt_exception_t __hlt_exception_unspecified;
extern __hlt_exception_t __hlt_exception_division_by_zero;
extern __hlt_exception_t __hlt_exception_value_error;

// Reports an uncaugt exception.
extern void __hlt_exception_print_uncaught(__hlt_exception_t exception);

// Raise an exception. 
extern void __hlt_exception_raise(__hlt_exception_t exception);

///////////////////////////////////////////////////////////////////////////////
// Replacement functions for malloc/calloc/realloc that provide automatic
// garbage collection.
///////////////////////////////////////////////////////////////////////////////

// Allocates n bytes of memory and promises that they will never contain any
// pointers.
extern void* __hlt_gc_malloc_atomic(size_t n);

// Allocates n bytes of memory, which may be used to store pointers to other
// objects. 
// 
// Todo: At some point, we'll likely change this interface to require a
// pointer map to be passed in.
extern void* __hlt_gc_malloc_non_atomic(size_t n);

// Allocates n bytes of zero-initialized memory and promises that they will
// never contain any pointers.
extern void* __hlt_gc_calloc_atomic(size_t count, size_t n);

// Allocates n bytes of zero-initialized memory, which may be used to store
// pointers to other objects. 
// 
// Todo: At some point, we'll likely change this interface to require a
// pointer map to be passed in.
extern void* __hlt_gc_calloc_non_atomic(size_t count, size_t n);

// Reallocates the memory to a chunk of size n and promises that they never
// contain any pointers. The original memory must have been allocated with a
// *_atomic function as well.
extern void* __hlt_gc_realloc_atomic(void* ptr, size_t n);

// Reallocates the memory to a chunk of size n, which may be used to store
// pointers to other objects. The original memory must have been allocated
// with a *_non_atomic function as well.
extern void* __hlt_gc_realloc_non_atomic(void* ptr, size_t n);

///////////////////////////////////////////////////////////////////////////////
// Support functions for HILTI's string data type.
///////////////////////////////////////////////////////////////////////////////

typedef int32_t __hlt_string_size_t;

typedef struct  {
    __hlt_string_size_t len;
    int8_t bytes[];
} __attribute__((__packed__)) __hlt_string;

extern __hlt_string_size_t __hlt_string_len(const __hlt_string* s);
extern const __hlt_string* __hlt_string_concat(const __hlt_string* s1, const __hlt_string* s2);
extern const __hlt_string* __hlt_string_substr(const __hlt_string* s1, __hlt_string_size_t pos, __hlt_string_size_t len);
extern __hlt_string_size_t __hlt_string_find(const __hlt_string* s, const __hlt_string* pattern);
extern int __hlt_string_cmp(const __hlt_string* s1, const __hlt_string* s2);

#endif    
