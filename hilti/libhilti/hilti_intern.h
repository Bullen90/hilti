/* $Id$
 * 
 * Private interface that is supposed to be used only from other libhilti
 * functions, or from code generated by the HILTI compiler. In other words,
 * the elements of this interface are never exposed to a HILTI user. 
 * 
 */

#ifndef HILTI_INTERN_H
#define HILTI_INTERN_H

#include <stdlib.h>
#include <stdint.h>

#include "hilti.h"

///////////////////////////////////////////////////////////////////////////////
// Predefined exceptions.
///////////////////////////////////////////////////////////////////////////////

extern __hlt_exception __hlt_exception_unspecified;
extern __hlt_exception __hlt_exception_division_by_zero;
extern __hlt_exception __hlt_exception_value_error;
extern __hlt_exception __hlt_exception_out_of_memory;
extern __hlt_exception __hlt_exception_wrong_arguments;

// Reports an uncaugt exception.
extern void __hlt_exception_print_uncaught(__hlt_exception exception);

// Raise an exception. 
extern void __hlt_exception_raise(__hlt_exception exception);

///////////////////////////////////////////////////////////////////////////////
// Run-time information about HILTI types.
///////////////////////////////////////////////////////////////////////////////

// Unique id values to identify a type. These numbers must match the type's
// _id class member in the Python module hilti.core.Type.
#define __HLT_TYPE_ERROR   0 
#define __HLT_TYPE_INTEGER 1 
#define __HLT_TYPE_BOOL    2 
#define __HLT_TYPE_STRING  3 

typedef struct __hlt_type_info {

    // The type's __HLT_TYPE_* id.
    int16_t type; 
    
    // A readable version of the type's name. 
    const char* tag;
    
    // List of type operations defined in libhilti functions. Pointers may be
    // zero to indicate that a type does not support an operation. 
    
    // Return a readable representation of a value. 'val' is actually the
    // value to convert, with the C type as HILTI uses normally for values of
    // that type. 'options' is currently unused and will be always zero. In
    // the future, we might use it to pass in hints about the prefered
    // format.
    __hlt_string* (*libhilti_fmt)(void *val, int32_t options, __hlt_exception*);
    
    // Type-parameters start here. The format is type-specific.
    char type_params[];
};

///////////////////////////////////////////////////////////////////////////////
// Replacement functions for malloc/calloc/realloc that provide automatic
// garbage collection.
///////////////////////////////////////////////////////////////////////////////

// Allocates n bytes of memory and promises that they will never contain any
// pointers.
extern void* __hlt_gc_malloc_atomic(size_t n);

// Allocates n bytes of memory, which may be used to store pointers to other
// objects. 
// 
// Todo: At some point, we'll likely change this interface to require a
// pointer map to be passed in.
extern void* __hlt_gc_malloc_non_atomic(size_t n);

// Allocates n bytes of zero-initialized memory and promises that they will
// never contain any pointers.
extern void* __hlt_gc_calloc_atomic(size_t count, size_t n);

// Allocates n bytes of zero-initialized memory, which may be used to store
// pointers to other objects. 
// 
// Todo: At some point, we'll likely change this interface to require a
// pointer map to be passed in.
extern void* __hlt_gc_calloc_non_atomic(size_t count, size_t n);

// Reallocates the memory to a chunk of size n and promises that they never
// contain any pointers. The original memory must have been allocated with a
// *_atomic function as well.
extern void* __hlt_gc_realloc_atomic(void* ptr, size_t n);

// Reallocates the memory to a chunk of size n, which may be used to store
// pointers to other objects. The original memory must have been allocated
// with a *_non_atomic function as well.
extern void* __hlt_gc_realloc_non_atomic(void* ptr, size_t n);

///////////////////////////////////////////////////////////////////////////////
// Support functions for HILTI's integer data type.
///////////////////////////////////////////////////////////////////////////////

extern const __hlt_string* __hlt_int_fmt(int64_t n, int32_t options, __hlt_exception* exception);

///////////////////////////////////////////////////////////////////////////////
// Support functions for HILTI's boolean data type.
///////////////////////////////////////////////////////////////////////////////

extern const __hlt_string* __hlt_bool_fmt(int8_t b, int32_t options, __hlt_exception* exception);

///////////////////////////////////////////////////////////////////////////////
// Support functions for HILTI's string data type.
///////////////////////////////////////////////////////////////////////////////

typedef int32_t __hlt_string_size;

typedef struct __hlt_string {
    __hlt_string_size len;
    int8_t bytes[];
} __attribute__((__packed__));

extern const __hlt_string* __hlt_string_fmt(const __hlt_string* s, int32_t options, __hlt_exception* exception);
extern __hlt_string_size __hlt_string_len(const __hlt_string* s, __hlt_exception* exception);
extern const __hlt_string* __hlt_string_concat(const __hlt_string* s1, const __hlt_string* s2, __hlt_exception* exception);
extern const __hlt_string* __hlt_string_substr(const __hlt_string* s1, __hlt_string_size pos, __hlt_string_size len, __hlt_exception* exception);
extern __hlt_string_size __hlt_string_find(const __hlt_string* s, const __hlt_string* pattern, __hlt_exception* exception);
extern int __hlt_string_cmp(const __hlt_string* s1, const __hlt_string* s2, __hlt_exception* exception);

#endif    
