# $Id$
#
# Internal libhilti functions.

module __Hlt

import Hilti

# Conversion function. Note that these must be declated with an "any" 
# parameter to make their C signatures compatible. They will nevertheless get
# only parameters of "their" type.

declare "C-HILTI" string bool_to_string(any b, int32 options)
declare "C-HILTI" string enum_to_string(any e, int32 options)
declare "C-HILTI" string double_to_string(any d, int32 options)
declare "C-HILTI" string int_to_string(any n, int32 options)
declare "C-HILTI" string string_to_string(any s, int32 options)
declare "C-HILTI" string tuple_to_string(any t, int32 options)
declare "C-HILTI" string channel_to_string(any c, int32 options)
declare "C-HILTI" string bytes_to_string(any b, int32 options)
declare "C-HILTI" string addr_to_string(any b, int32 options)
declare "C-HILTI" string port_to_string(any b, int32 options)

declare "C-HILTI" string int_to_int64(any n)
declare "C-HILTI" string bool_to_int64(any b)
declare "C-HILTI" string enum_to_int64(any b)
declare "C-HILTI" string port_to_int64(any b)

declare "C-HILTI" string double_to_double(any d)

###

declare "C-HILTI" int32 string_len(string s)
declare "C-HILTI" string string_concat(string s1, string s2)
declare "C-HILTI" int8 string_cmp(string s1, string s2)
declare "C-HILTI" bytes string_encode(string s, string charset)
declare "C-HILTI" string string_decode(bytes b, string charset)
declare "C-HILTI" tuple<string,iterator<bytes>> string_unpack(iterator<bytes> begin, iterator<bytes> end, Hilti::Packed fmt)

###

declare "C-HILTI" ref<channel<*>> channel_new(type channel_type)
declare "C-HILTI" void channel_write(ref<channel<*>> ch, any data)
declare "C-HILTI" void channel_try_write(ref<channel<*>> ch, any data)
declare "C-HILTI" any channel_read(ref<channel<*>> ch)
declare "C-HILTI" any channel_try_read(ref<channel<*>> ch)
declare "C-HILTI" int64 channel_get_size(ref<channel<*>> ch)

###

declare "C-HILTI" bytes bytes_new()
declare "C-HILTI" int32 bytes_len(bytes b)
declare "C-HILTI" bool bytes_empty(bytes b)
declare "C-HILTI" void  bytes_append(bytes b, bytes other)
declare "C-HILTI" bytes bytes_sub(iterator<bytes> start, iterator<bytes> end)
declare "C-HILTI" iterator<bytes> bytes_offset(bytes b, int32 offset)
declare "C-HILTI" iterator<bytes> bytes_begin(bytes b)
declare "C-HILTI" iterator<bytes> bytes_end(bytes b)

declare "C-HILTI" any bytes_sub_raw(iterator<bytes> start, iterator<bytes> end)

declare "C-HILTI" int8 bytes_pos_deref(iterator<bytes> pos)
declare "C-HILTI" iterator<bytes> bytes_pos_incr(iterator<bytes> pos)
declare "C-HILTI" iterator<bytes> bytes_pos_incr_by(iterator<bytes> pos, int<32> n)
declare "C-HILTI" bool bytes_pos_eq(iterator<bytes> pos1, iterator<bytes> pos2)
declare "C-HILTI" int32 bytes_pos_diff(iterator<bytes> pos1, iterator<bytes> pos2)

    
