
Instructions
============

- Single return statement independent of whether we're returning a
value or not. 

- the string variants of regexp.* aren't implemented yet.

Data Types
==========

- string type is still missing instructions

Bug fixes
=========

- Bytes objects are initialized to null pointers, which causes
crashes.

Infrastructure
===============

- Add garbage collector

- Complete exception support, includin systematicallizin the use of exception
  (what exception is thrown there). We should probably add:
        
        * an out-of-range exception, and use that when iterators are out of
        range. 

- We can't type-check the additional (optional) argument of the @unpack yet. 

- We don't ensure that instruction modyfing an arguments only get
  a non-constants.
  
- The list ctor doesn't work for integers yet because we can't infer
  the integer width. Need to add some heuristics to the
  canonacalizer just as for integer tuples. Liekwise, the list ctor
  can't create empty lists because we can't infer type information.

Optimizations
=============

- In CodeGen.llvmGenerateCCall, when returning structs, 
we have to create a temporary on the stack just because we can't cast an
integer into a struct. I'd think the tmp could be optimized away but it
currently isn't. 

- The byte-order specific unpack's could use the bswap intrinsic.

- The addr's check for an IPv4 address could use the ctlz intrinsic.

Cleanup 
=======

- Implement "export" linkage: 
  * only exported functions get external LLVM linkage
  * otherwise, export implies everything "declare" does
  * Update: we have the export keyword now to trigger the generation
  of C stubs. But the above still needs to be done I believe.

- Mark internal libhilti functions with special linkage rather than
relying on "__"

- Remove labels' @-prefix

- Replace resolver's int-width derivation with usage of codegen's
 refine_to.

- Linkage should apply to all globals, not just functions.

- We now have codegen.llvmAddGlobalConst but there are still a few locations
  which duplicate the code to install global const. Move them over to using the
  new function.

- Do we still need:

  * type.fmtClassName()?
  * the whole type comparision logic now that we have constraint functions?
  * wildcard types? 
  * the Any type?
  * refine_to in codegen.llvmOp()
  * all or parts of the int-width logic in resolver?

- If we still need wildcard types, cleanup how they are instantiated (empty
list vs. "*" vs. ["*"])

- In codege/*.py, Remove the explicit cg/self arguments to pass
around the code generator object. Use global singleton directly
instread.

- Rename TypeDeclType to TypeDecl

- Do we need the IteratorX types, or is a single Iterator type sufficient?

- libhilti's TRE is currently not linked statically into libhilti.
Need to figure out how to compile it with llvm-gcc.

- The varioys type ctros that take only one argument should be
changed to accept it as a non-list (e.g., type.List(t) instead of
type.List([t]). Note that we need to support both variants though.

Documentation
=============

- More of the docstring derived text should be automatically
included without the need for manual auto* directives.

- We need to figure out a way to document the libhilti and generally
C-level stuff.

- The type-specific implementation of operators should be documented
separately from the type's standard instruction; perhaps in a 
subsection or so.

- The auto-generated strings for instruction parameters aren't
always quite right yet. 

Misc
====

- Look at http://bjoern.hoehrmann.de/utf-8/decoder/dfa/ for an
alternative (and extremely small) UTF-8 decoder. 
