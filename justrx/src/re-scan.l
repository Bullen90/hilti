
/* Loosely based on Bro's re-scan.l */

%{
#include "jrx.h"
#include "nfa.h"
#include "util.h"
#include "re-parse.h"

#define RE_error REerror
void REerror(yyscan_t scanner, const char* msg);

%}

%x COUNT CCL_FIRST CCL
%option nounput noyywrap reentrant bison-bridge header-file="re-scan.h" prefix="RE"

ESCSEQ          (\\([^\n]|[0-7]+|x[[:xdigit:]]{2}))

CCL_EXPR        ("[:"[[:alpha:]]+":]")
CCL_CHAR_FIRST  ([^\\]|{CCL_EXPR}|{ESCSEQ})
CCL_CHAR        ([^\\\]]|{CCL_EXPR}|{ESCSEQ})

%%

<INITIAL>{
	"{"/[[:digit:]] BEGIN(COUNT); return '{';
	"["             BEGIN(CCL_FIRST); return '[';

	[|*+?.(){}]	    return yytext[0];
    
	"^"		yylval->assertion = JRX_ASSERTION_BOL; return TOK_ASSERTION;
	"$"		yylval->assertion = JRX_ASSERTION_EOL; return TOK_ASSERTION;
	"\\b"	yylval->assertion = JRX_ASSERTION_WORD_BOUNDARY; return TOK_ASSERTION;
	"\\B"	yylval->assertion = JRX_ASSERTION_NOT_WORD_BOUNDARY; return TOK_ASSERTION;

	.       yylval->cp = yytext[0]; return TOK_CODEPOINT;
}

<CCL_FIRST>{
	"^"            return TOK_NEGATE_CCL;
	.              BEGIN(CCL); yylval->cp = yytext[0]; return TOK_CODEPOINT;
}

<CCL>{
	-/[^\]]         return '-';
	[^\]]           yylval->cp = yytext[0]; return TOK_CODEPOINT;
	"]"             BEGIN(INITIAL); return ']';
}

<CCL_FIRST,CCL>{
	"[:lower:]"     yylval->dynccl = JRX_STD_CCL_LOWER; return TOK_DYNCCL;
	"[:upper:]"     yylval->dynccl = JRX_STD_CCL_UPPER; return TOK_DYNCCL;
	{CCL_EXPR}      RE_error("bad character class", yyscanner); BEGIN(CCL); return TOK_DYNCCL;
}

<COUNT>{
	[[:digit:]]+    yylval->count = atoi(yytext); return TOK_COUNT;
	","             return ',';
	"}"             BEGIN(INITIAL); return '}';
	.	            RE_error("bad character inside {}'s", yyscanner); BEGIN(INITIAL); return '}';
}

<INITIAL,CCL_FIRST,CCL>{ESCSEQ}	{
			const char* esc_text = yytext + 1;
			yylval->cp = jrx_expand_escape(esc_text);

			if ( YY_START == CCL_FIRST )
				BEGIN(CCL);

			return TOK_CODEPOINT;
			}

%%

void REerror(yyscan_t scanner, const char* msg)
{
    const char** errmsg = REget_extra(scanner);
    if ( errmsg && ! *errmsg )
        *errmsg = msg;
}
