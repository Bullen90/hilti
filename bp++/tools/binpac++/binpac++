#! /usr/bin/env python2.6
#
# Command-line compiler for BinPAC++ programs. 

Version = 0.1

import sys
import os.path
import optparse
import subprocess

# Get configuration information.
def initPaths():
    def run_config(tool, option):
        try:
            # Get HILTI Python module path. 
            return subprocess.Popen([tool, option], stdout=subprocess.PIPE).communicate()[0].strip()
        except:
            return ""

    try:
        hilti_config = os.environ["HILTI_CONFIG"]
    except:
        hilti_config = "hilti-config"
        
    try:
        binpac_config = os.environ["BINPAC_CONFIG"]
    except:
        binpac_config = "binpac-config"

    sys.path = run_config(hilti_config, "--pythonpath").split(":") + sys.path
    sys.path = run_config(binpac_config, "--pythonpath").split(":") + sys.path
    
    global import_paths
    import_paths = []
    import_paths += run_config(hilti_config, "--libhilti").split()
    import_paths += run_config(binpac_config, "--libbinpac").split()

# Collect -I arguments. 
def import_path_callback(option, opt, value, parser):
    global import_paths
    import_paths += [value]

initPaths()

import hilti
import binpac
    
### Main.    
    
optparser = optparse.OptionParser(usage="%prog [options] <input-file>", version=Version)
optparser.add_option("-n", "--hilti-no-validate", action="store_true", dest="hlt_novalidate", default=False,
                     help="Output before validating code (for debugging)")
optparser.add_option("-o", "--output", action="store", type="string", dest="output", default=None,
                     help="Store output in file (default is print to stdout)", metavar="FILE")
optparser.add_option("-I", "--import-path", action="callback", callback=import_path_callback, type="string",
                     help="Add DIR to search path for imports", metavar="DIR")
optparser.add_option("-d", "--debug", action="store_true", dest="debug", default=False,
                     help="Compile with debugging support")
optparser.add_option("-p", "--print", action="store_true", dest="printer", default=False,
                     help="Output the BinPAC++ code as it was parsed via the internal code printer")
optparser.add_option("-t", "--print-tables", action="store_true", dest="debug_tables", default=False,
                     help="Output all generated parse tables to stdout; this for debugging and does not generate any code.""")
optparser.add_option("-T", "--print-all-tables", action="store_true", dest="debug_tables_verbose", default=False,
                     help="Output all generated grammars, parse tables, and all intermediary tables; this for debugging and does not generate any code.""")
                     
(options, args) = optparser.parse_args()

if not options.output:
    options.output = "/dev/stdout"

if options.hlt_novalidate:
    options.hlt = True
    
if len(args) < 1:
    optparser.error("no input file specified")

if len(args) > 1:
    optparser.error("more than one input file specified")

# Always search in current directory.    
import_paths += ["."]    
    
input = args[0]    
dest = options.output    
prototypes = None

(root, ext) = os.path.splitext(input)

if not dest:
    dest = root + ".hlt"

try:
    output = open(dest, "w")        
except IOError, e:
    print >>sys.stderr, "cannot open %s for output: %s" % (dest, e)
    sys.exit(1)
        
# Parse input.    
(errors, mod) = binpac.parser.parsePAC(input, import_paths)
if errors:
    print >>sys.stderr, "\n%d errors in input, aborting." % errors
    sys.exit(1)

if options.debug_tables:
    binpac.printer.printGrammars(mod, sys.stdout, False)
    sys.exit(0)
    
if options.debug_tables_verbose:
    binpac.printer.printGrammars(mod, sys.stdout, True)
    sys.exit(0)
    
errors = binpac.validator.validateModule(mod)
if errors:
    print >>sys.stderr, "\n%d errors in input, aborting." % errors
    sys.exit(1)

if options.printer:
    binpac.printer.printModule(mod, output)
    sys.exit(0)
    
(success, hltmod) = binpac.codegen.compileModule(mod, import_paths=import_paths, debug=options.debug, validate=(not options.hlt_novalidate))
if not success:
    print >>sys.stderr, "\ncode generation failed, aborting."
    sys.exit(1)

if errors:
    print "\n%d errors in generated HILTI code, aborting." % errors
    sys.exit(1)

# Done.     
    
hilti.printModule(hltmod, output=output)

sys.exit(0)

        
