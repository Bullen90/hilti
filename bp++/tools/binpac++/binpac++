#! /usr/bin/env python2.6
#
# Command-line compiler for BinPAC++ programs. 

Version = 0.1

import sys
import os.path
import optparse
import subprocess

# Get configuration information.
def initPaths():
    def run_config(tool, option):
        try:
            # Get HILTI Python module path. 
            return subprocess.Popen([tool, option], stdout=subprocess.PIPE).communicate()[0].strip()
        except:
            return ""
        
    sys.path = run_config("hilti-config", "--pythonpath").split(":") + sys.path
    sys.path = run_config("binpac-config", "--pythonpath").split(":") + sys.path
    
    global import_paths
    import_paths = []
    import_paths += run_config("hilti-config", "--libhilti").split()
    import_paths += run_config("binpac-config", "--libbinpac").split()

#### Test code. To be removed.
from binpac.core.grammar import *
from binpac.core import type
from binpac.support import constant

def makeTestParser():
    
    hs = Literal(constant.Constant("#", type.Bytes()))
    pl = Literal(constant.Constant("(", type.Bytes()))
    pr = Literal(constant.Constant(")", type.Bytes()))
    no = Literal(constant.Constant("!", type.Bytes()))
    qu = Literal(constant.Constant("?", type.Bytes()))
    st = Variable(type.Bytes())

    F = Sequence([no, st], sym="Fact") 
    Q = Sequence([qu, st], sym="Question")
    
    S = Alternative([], sym="Session")
    SS = Sequence([pl, S, pr, S])
    Fs = Alternative([], sym="Facts")
    FsQ = Sequence([Fs, Q])
    FFs = Sequence([F,Fs])
    
    S.addProduction(FsQ)
    S.addProduction(SS)
    
    Fs.addProduction(FFs)
    Fs.addProduction(Epsilon)

    root = Sequence([S,hs], sym="Start")
    g2 = Grammar("FooBar", root)

    return g2        
        
# Collect -I arguments. 
def import_path_callback(option, opt, value, parser):
    global import_paths
    import_paths += [value]

initPaths()

import hilti
import binpac.core.pgen
    
### Main.    
    
optparser = optparse.OptionParser(usage="%prog [options] <input-file>", version=Version)
optparser.add_option("-n", "--hilti-no-verify", action="store_true", dest="hlt_noverify", default=False,
                     help="Do not verify correctness of generated HILTI code")
optparser.add_option("-o", "--output", action="store", type="string", dest="output", default=None,
                     help="Store output in file (default is print to stdout)", metavar="FILE")
optparser.add_option("-I", "--import-path", action="callback", callback=import_path_callback, type="string",
                     help="Add DIR to search path for imports", metavar="DIR")
optparser.add_option("-d", "--debug", action="store_true", dest="debug", default=False,
                     help="Compile with debugging support")

(options, args) = optparser.parse_args()

if not options.output:
    options.output = "/dev/stdout"

if options.hlt_noverify:
    options.hlt = True
    
if len(args) < 1:
    optparser.error("no input file specified")

if len(args) > 1:
    optparser.error("more than one input file specified")

# Always search in current directory.    
import_paths += ["."]    
    
input = args[0]    
dest = options.output    
prototypes = None

(root, ext) = os.path.splitext(input)

if not dest:
    dest = root + ".hlt"

try:
    output = open(dest, "w")        
except IOError, e:
    print >>sys.stderr, "cannot open %s for output: %s" % (dest, e)
    sys.exit(1)
        
## # Parse input.    
## (errors, ast) = parser.parse(input, import_paths)

g = makeTestParser()

error = g.check()
if error:
    print >>sys.stderr, "error in grammar: %s" % error
    sys.exit(1)

module = hilti.core.module.Module("ParserTest")

pgen = binpac.core.pgen.ParserGen(module, import_paths)
pgen.compile(g)

# errors = hilti.checker.checkAST(module)

hilti.printer.printAST(module, output=output)

sys.exit(0)

        
